package CricketManagementSystem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rokzz12
 */
public class AddUpdateDeleteMatch extends javax.swing.JFrame {

    /**
     * Creates new form UdpateDeleteMatch
     */
    public AddUpdateDeleteMatch() {
        initComponents();
        userLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        save = new javax.swing.JButton();
        close = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        stadium_id = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        match_id = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        team2_id = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        team1_id = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        delete = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMatch = new javax.swing.JTable();
        match_date = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        save.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/save.png"))); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        close.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Exit application.png"))); // NOI18N
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Emoji", 1, 36)); // NOI18N
        jLabel1.setText("ADD/UPDATE/DELETE MATCH DETAILS");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel14.setText("Team2 ID");

        stadium_id.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel15.setText("Stadium ID");

        match_id.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel12.setText("Match ID");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel11.setText("Team1 ID");

        team2_id.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel13.setText("Date Of Match");

        team1_id.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        delete.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/delete.png"))); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        reset.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/reset.png"))); // NOI18N
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Update details.png"))); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        tblMatch.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblMatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MATCH ID", "TEAM1 ID", "TEAM2 ID", "DATE OF MATCH", "STADIUM ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMatch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMatchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMatch);
        if (tblMatch.getColumnModel().getColumnCount() > 0) {
            tblMatch.getColumnModel().getColumn(3).setMinWidth(120);
            tblMatch.getColumnModel().getColumn(3).setPreferredWidth(120);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 974, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(155, 155, 155)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(stadium_id, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(team1_id, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                            .addComponent(team2_id, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                            .addComponent(match_id, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                            .addComponent(match_date))))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(update)
                .addGap(47, 47, 47)
                .addComponent(delete)
                .addGap(56, 56, 56)
                .addComponent(reset)
                .addGap(56, 56, 56)
                .addComponent(close)
                .addGap(69, 69, 69))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 974, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel12))
                            .addComponent(match_id, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(team1_id, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(team2_id, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(match_date, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(stadium_id, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(close)
                    .addComponent(delete)
                    .addComponent(reset)
                    .addComponent(update))
                .addGap(43, 43, 43))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement pst;
    ResultSet rs;
    DefaultTableModel d;

    public void userLoad() {
        int count;
        try {
            Connection con = ConnectionProvider.getConnection();
            pst = con.prepareStatement("select * from matches");
            rs = pst.executeQuery();

            ResultSetMetaData rsd = rs.getMetaData();
            count = rsd.getColumnCount();
            d = (DefaultTableModel) tblMatch.getModel();
            d.setRowCount(0);
            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 1; i <= count; i++) {
                    v2.add(rs.getString("match_id"));
                    v2.add(rs.getString("team1_id"));
                    v2.add(rs.getString("team2_id"));
                    v2.add(rs.getString("match_date"));
                    v2.add(rs.getString("stadium_id"));
                }
                d.addRow(v2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddUpdateDeleteMatch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeActionPerformed
        this.dispose();
    }// GEN-LAST:event_closeActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resetActionPerformed
        match_id.setText("");
        team1_id.setText("");
        team2_id.setText("");
        match_date.setText("");
        stadium_id.setText("");
    }// GEN-LAST:event_resetActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveActionPerformed
        try {
            int matchid = Integer.parseInt(match_id.getText());
            int team1id = Integer.parseInt(team1_id.getText());
            int team2id = Integer.parseInt(team2_id.getText());
            // SimpleDateFormat dFormat = new SimpleDateFormat("yyyy-MM-dd");
            String date_of_match = match_date.getText();
            int stadiumid = Integer.parseInt(stadium_id.getText());

            Connection con = ConnectionProvider.getConnection();
            pst = con.prepareStatement(
                    "insert into matches (match_id, team1_id, team2_id, match_date, stadium_id) values(?, ?, ?, ?, ?)");
            pst.setInt(1, matchid);
            pst.setInt(2, team1id);
            pst.setInt(3, team2id);
            pst.setString(4, date_of_match);
            pst.setInt(5, stadiumid);
            pst.executeUpdate();

            JOptionPane.showMessageDialog(this, "Successfully Saved");

            this.dispose();
            new AddUpdateDeleteMatch().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(AddUpdateDeleteMatch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_saveActionPerformed

    private void tblMatchMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tblMatchMouseClicked
        d = (DefaultTableModel) tblMatch.getModel();
        int selectIndex = tblMatch.getSelectedRow();
        // get the data from table to input fields
        match_id.setText(d.getValueAt(selectIndex, 0).toString());
        team1_id.setText(d.getValueAt(selectIndex, 1).toString());
        team2_id.setText(d.getValueAt(selectIndex, 2).toString());
        //try {
        //    Date date = new SimpleDateFormat("yyyy-MM-dd").parse((String) 
        match_date.setText(d.getValueAt(selectIndex, 3).toString());
        //    date_of_match.setDate(date);
        //} catch (ParseException ex) {
        //    Logger.getLogger(AddUpdateDeleteMatch.class.getName()).log(Level.SEVERE, null, ex);
        //}
        // date_of_match.setDate(d.getValueAt(selectIndex, 3));
        stadium_id.setText(d.getValueAt(selectIndex, 4).toString());
    }// GEN-LAST:event_tblMatchMouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_updateActionPerformed
        try {
            int matchid = Integer.parseInt(match_id.getText());
            int team1id = Integer.parseInt(team1_id.getText());
            int team2id = Integer.parseInt(team2_id.getText());
            //SimpleDateFormat dFormat = new SimpleDateFormat("yyyy-MM-dd");
            String date_of_match = match_date.getText();
            int stadiumid = Integer.parseInt(stadium_id.getText());

            Connection con = ConnectionProvider.getConnection();
            pst = con.prepareStatement(
                    "update matches set team1_id = ?, team2_id = ?, match_date = ?, stadium_id = ? where match_id = ?");
            pst.setInt(1, team1id);
            pst.setInt(2, team2id);
            pst.setString(3, date_of_match);
            pst.setInt(4, stadiumid);
            pst.setInt(5, matchid);
            pst.executeUpdate();

            JOptionPane.showMessageDialog(this, "Successfully Saved");

            this.dispose();
            new AddUpdateDeleteMatch().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(AddUpdateDeleteMatch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteActionPerformed
        try {
            int matchid = Integer.parseInt(match_id.getText());
            Connection con = ConnectionProvider.getConnection();
            PreparedStatement pst = con.prepareStatement("delete from matches where match_id = ?");
            pst.setInt(1, matchid);

            pst.executeUpdate();

            JOptionPane.showMessageDialog(this, "Succesfully Deleted");

            this.dispose();
            new AddUpdateDeleteMatch().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(AddUpdateDeleteMatch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_deleteActionPerformed

    private void team2_idActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_team2_idActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_team2_idActionPerformed

    private void team1_idActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_team1_idActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_team1_idActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddUpdateDeleteMatch.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddUpdateDeleteMatch.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddUpdateDeleteMatch.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddUpdateDeleteMatch.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddUpdateDeleteMatch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField match_date;
    private javax.swing.JTextField match_id;
    private javax.swing.JButton reset;
    private javax.swing.JButton save;
    private javax.swing.JTextField stadium_id;
    private javax.swing.JTable tblMatch;
    private javax.swing.JTextField team1_id;
    private javax.swing.JTextField team2_id;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
